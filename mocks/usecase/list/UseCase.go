// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	entity "Jumia_todoList/entity"

	mock "github.com/stretchr/testify/mock"

	model "Jumia_todoList/api/model"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *UseCase) Create(_a0 model.ListCreateInput) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(model.ListCreateInput) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.ListCreateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0
func (_m *UseCase) Delete(_a0 model.ListRemoveInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.ListRemoveInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllLists provides a mock function with given fields: _a0
func (_m *UseCase) GetAllLists(_a0 model.GetAllListInput) []entity.List {
	ret := _m.Called(_a0)

	var r0 []entity.List
	if rf, ok := ret.Get(0).(func(model.GetAllListInput) []entity.List); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.List)
		}
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *UseCase) Update(_a0 model.ListUpdateInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.ListUpdateInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
