// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	entity "Jumia_todoList/entity"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *Repository) Create(_a0 *entity.Task, _a1 []string) (int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int
	if rf, ok := ret.Get(0).(func(*entity.Task, []string) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Task, []string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0
func (_m *Repository) Delete(_a0 int) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterInAllList provides a mock function with given fields: _a0
func (_m *Repository) FilterInAllList(_a0 []string) ([]entity.Task, error) {
	ret := _m.Called(_a0)

	var r0 []entity.Task
	if rf, ok := ret.Get(0).(func([]string) []entity.Task); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterList provides a mock function with given fields: _a0, _a1
func (_m *Repository) FilterList(_a0 int, _a1 []string) ([]entity.Task, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []entity.Task
	if rf, ok := ret.Get(0).(func(int, []string) []entity.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, []string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0
func (_m *Repository) Get(_a0 int) ([]entity.Task, error) {
	ret := _m.Called(_a0)

	var r0 []entity.Task
	if rf, ok := ret.Get(0).(func(int) []entity.Task); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *Repository) Update(_a0 *entity.Task, _a1 uint) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Task, uint) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
